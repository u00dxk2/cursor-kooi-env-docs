COPY-PASTE THIS TO ANOTHER AI ASSISTANT:
================================================================================

Please create a `.cursor/rules/project-environment.mdc` file documenting this development environment.

**IMPORTANT:** This should be a Cursor rule file (`.mdc`) with YAML frontmatter:

```markdown
---
title: Project Environment Context
description: Core project environment information - shell, paths, tech stack, and development workflow
alwaysApply: true
---

# Project Environment Documentation

> **Last Updated:** YYYY-MM-DD  
> **Review Frequency:** Check every conversation  
> **Next Review:** YYYY-MM-DD

## üìã Maintenance Log
| Date | Change | Updated By |
|------|--------|------------|
| YYYY-MM-DD | Initial creation | AI Assistant |

[... rest of content ...]
```

**Why `.mdc` format?**
- ‚úÖ Automatically loaded at session start (no need for agents to manually read it)
- ‚úÖ Uses `alwaysApply: true` flag to ensure every conversation has this context
- ‚úÖ Proper Cursor rule format that's always ingested
- ‚ùå Plain `.md` files in `.cursor/` are NOT automatically loaded

**Include these sections:**

1. **Directory Structure** - Absolute project root path and path format (Windows/Unix)

2. **Shell Environment** - Shell type for YOU (PowerShell/Bash/Zsh) and critical syntax differences
   - If this is a team project with multiple platforms, document ALL platforms
   - Example: "Team uses: Windows (PowerShell), macOS (Zsh), Linux (Bash)"
   - Show examples of commands that fail vs work (e.g., `&&` vs `;` in PowerShell)
   
3. **Common Commands** - Git workflow, package manager, build/test/dev commands
   - For single-platform projects: Use correct syntax for your shell
   - For multi-platform teams: Document commands for ALL team platforms side-by-side
   - Label each: "PowerShell:", "Bash/Zsh:", or "All Platforms:"

4. **Tech Stack** - Framework, language versions, key dependencies, databases, external APIs

5. **Environment Gotchas** - Mistakes to avoid, line endings, path issues, quirks you've encountered

6. **Development Workflow** - How to start dev server, run tests, build, lint/format

Optional: API keys needed (no values!), external services, IDE recommendations, links to other `.cursor/rules/` docs

Use ‚úÖ/‚ùå to show correct vs incorrect approaches. Keep it concise but practical.

**IMPORTANT: Add AI instructions at the bottom:**
```markdown
## ü§ñ AI Assistant Instructions

**This file is automatically loaded at session start due to `alwaysApply: true` in the frontmatter.**

**When starting a new session:**
1. **Check Staleness:** Look at "Last Updated" date
   - If >7 days old: Offer to review and update
   - If >14 days old: Strongly recommend immediate review
2. **During Development:** Update this doc immediately when discovering gotchas
3. **Update Process:** Edit sections, update dates, add maintenance log entry
4. **Maintenance Frequency:** Check every conversation start (automatic)
```

After creating it, commit the .cursor/ documentation files to the repository:

**‚ö†Ô∏è BEFORE COMMITTING - Ensure you're in the project root directory:**

```bash
# PowerShell:
pwd   # Check current directory - should be your project root

# If not in project root, navigate there first:
cd "C:\path\to\your\project"
```

**Commit commands (platform-specific):**

```bash
# PowerShell (Windows) - note: .sh files may not exist, that's OK:
git add .cursor/rules/ .cursor/README.md .cursor/*.ps1
git commit -m "feat: Add environment documentation system"

# Or use the safer directory-based approach:
git add .cursor/rules/ .cursor/README.md .cursor/*.ps1 2>$null; git add .cursor/
git commit -m "feat: Add environment documentation system"

# Bash/Zsh (Unix/Mac):
git add .cursor/rules/ .cursor/README.md .cursor/*.ps1 .cursor/*.sh
git commit -m "feat: Add environment documentation system"
```

‚ö†Ô∏è **IMPORTANT:** Commit the .cursor/ **documentation files** (rules, scripts, README.md) to Git. 
These are shared project documentation that benefit all team members.

**Do NOT commit:**
- `.cursor/extensions/` - IDE-managed extensions (auto-created by Cursor)
- `.cursor/ide_state.json` - User-specific IDE state
- `.cursor/quick-prompt.txt` - Optional (your local template copy)

üí° **Tips:** 
- Add `.cursor/extensions/` and `.cursor/ide_state.json` to your `.gitignore`
- Ignore git warnings about Windows special directories (Recent/, SendTo/, etc.) - these are normal
- On Windows-only projects, `.sh` scripts won't exist - that's expected!

================================================================================

WHY THIS NEW FORMAT?

According to Cursor's documentation and community research:
- Only `.mdc` files in `.cursor/rules/` are automatically loaded as rules
- Plain `.md` files are NOT automatically ingested into AI context
- The `alwaysApply: true` frontmatter flag ensures the rule loads in every session
- This guarantees agents have project context from the very first message

The old approach (`.md` file + rule that tells agent to read it) was fragile because:
- Depended on agent actually reading and following the maintenance rule
- Required manual file reading via tools
- Could be skipped if agent didn't prioritize the instruction

The new approach (`.mdc` with `alwaysApply: true`) is robust because:
- Cursor automatically loads it into every conversation
- No dependency on agent behavior or initiative
- Guaranteed context from session start
