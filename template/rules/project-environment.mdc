---
title: Project Environment Context
description: Core project environment information - shell, paths, tech stack, and development workflow
alwaysApply: true
---

# Project Environment Documentation

> **Last Updated:** [DATE - AI will set this]  
> **Review Frequency:** Check every conversation, update when environment changes  
> **Next Review:** [DATE + 7 days - AI will set this]

> ⚠️ **Note:** This is a TEMPLATE file. The actual `project-environment.mdc` should be generated by your AI assistant using the prompt in `quick-prompt.txt`. This file shows the expected structure and format.

---

## 📋 Maintenance Log

| Date | Change | Updated By |
|------|--------|------------|
| YYYY-MM-DD | Initial creation | AI Assistant |

---

## 📂 Directory Structure

**Project Root:** `[Your project path - e.g., /home/user/my-project or C:\Users\Name\Projects\my-project]`

**Path Format:** [Unix slashes / Windows backslashes / Git uses forward slashes]

**Repository Structure:**
```
your-project/
├── src/                   # Source code
├── tests/                 # Test files
├── .cursor/               # Cursor AI configuration
│   ├── rules/
│   │   ├── project-environment.mdc  # This file
│   │   └── [other rules]
│   └── [validation scripts]
├── [config files]
└── [other directories]
```

---

## 💻 Shell Environment

**Primary Development Environment:**
- **Developer:** [Your name]
- **OS:** [Windows 11 / macOS / Linux]
- **Shell:** [PowerShell / Bash / Zsh]
- **Path Style:** [Describe path format used]

**Team Considerations:**
- [List if team uses different platforms]
- [Note any cross-platform scripts or tools]

**Shell Syntax Differences:**

| Task | PowerShell | Bash/Zsh |
|------|------------|----------|
| Command chaining | `cmd1; cmd2` | `cmd1 && cmd2` |
| Path separator | `\` | `/` |
| Environment vars | `$env:VAR = "value"` | `export VAR=value` |
| Home directory | `$HOME` or `~` | `$HOME` or `~` |

---

## 🔧 Tech Stack

**Core Technologies:**
- **Language:** [JavaScript/TypeScript, Python, Rust, etc.] - Version X.X
- **Framework:** [Next.js, Django, Express, etc.] - Version X.X
- **Runtime:** [Node.js, Python, etc.] - Version X.X

**Key Dependencies:**
- [List important packages/libraries]
- **Database:** [PostgreSQL, MongoDB, SQLite, etc.]
- **State Management:** [Redux, Zustand, etc.]
- **Testing:** [Jest, pytest, etc.]

**External Services:**
- **[Service Name]:** [Purpose]
- ⚠️ **Required API Keys:** [List them, but NEVER include actual values]

**Development Tools:**
- **Editor:** Cursor
- **Version Control:** Git + [GitHub/GitLab/etc.]
- **Package Manager:** [npm, yarn, pip, cargo, etc.]

---

## 🔄 Common Commands

### Git Workflow

**All Platforms:**
```bash
# Check status
git status --short

# Stage and commit
git add -A
git commit -m "type: description"

# Push changes
git push origin main

# View recent commits
git log --oneline -10
```

### Package Manager

**[Your package manager - npm example]:**
```bash
# Install all dependencies
npm install

# Add new package
npm install package-name

# Update dependencies
npm update
```

### Development Commands

```bash
# Start dev server
[npm run dev / python manage.py runserver / cargo run]

# Run tests
[npm test / pytest / cargo test]

# Build for production
[npm run build / python setup.py build / cargo build --release]

# Lint code
[npm run lint / pylint / clippy]

# Format code
[npm run format / black . / cargo fmt]
```

---

## ⚠️ Environment Gotchas

### 1. [Common Gotcha 1]

**Problem:** [Description of what goes wrong]

**Solution:**
- ✅ [How to fix it]
- ❌ [What not to do]

**Symptoms if broken:**
```
[Error messages or symptoms]
```

**Testing:**
```bash
[Command to verify fix]
```

### 2. [Common Gotcha 2]

**Problem:** [Description]

**Solution:**
- [Steps to resolve]

**Why:**
- [Explanation of root cause]

**Best Practice:**
```bash
[Recommended approach]
```

### 3. Shell-Specific Quirks

**Issue:** [Description of shell quirk]

**Solutions:**
```bash
# ❌ Don't use (wrong shell)
[problematic command]

# ✅ Use (correct shell)
[correct command]
```

### 4. Path Issues

**[Path-related gotcha]:**
```bash
# ✅ Correct - [description]
[correct path usage]

# ❌ Wrong - [description]
[incorrect path usage]
```

---

## 🚀 Development Workflow

### Starting Development

1. **Navigate to project:** `cd [project-path]`
2. **[Setup step 2]:** [command]
3. **[Setup step 3]:** [command]
4. **Start dev server:** [command]

### Making Changes

1. **Create feature branch** (if using branches)
   ```bash
   git checkout -b feature/your-feature
   ```

2. **Make changes** and test locally

3. **Commit with semantic message:**
   ```bash
   git add -A
   git commit -m "type: description"
   ```

4. **Push changes:**
   ```bash
   git push origin [branch-name]
   ```

### Testing

```bash
# Run all tests
[command]

# Run specific test
[command]

# Run with coverage
[command]
```

### Building/Deployment

```bash
# Development build
[command]

# Production build
[command]

# Deploy to [platform]
[command]
```

### Updating Environment Docs (This File!)

**When to update:**
- ✅ Discovered new gotcha
- ✅ Changed development workflow
- ✅ Updated tech stack or dependencies
- ✅ Added new scripts or tools

**How to update:**
1. Edit this file
2. Update "Last Updated" date (top of file)
3. Update "Next Review" date (+7 days)
4. Add entry to Maintenance Log table
5. Commit:
   ```bash
   git add .cursor/rules/project-environment.mdc
   git commit -m "docs: Update environment docs - [what changed]"
   git push origin main
   ```

---

## 🔍 Troubleshooting

### Problem: [Common Problem 1]

**Symptoms:** [What you see]

**Check:**
```bash
[Diagnostic command]
```

**Fix:**
```bash
[Solution command]
```

### Problem: [Common Problem 2]

**Why this happens:** [Explanation]

**Solution:**
- [Step 1]
- [Step 2]

---

## 📚 Links to Other Documentation

### Internal Documentation
- [Link to other rule files if relevant]
- [Link to project README]
- [Link to architecture docs]

### External Resources
- [Official framework documentation]
- [Important API docs]
- [Style guides or standards]

---

## 🎯 Project Goals

**Project Description:**
[Brief description of what this project does]

**Key Principles:**
1. [Principle 1]
2. [Principle 2]
3. [Principle 3]

**Current Status:**
- [Milestone 1 status]
- [Milestone 2 status]

---

## 🤖 AI Assistant Instructions

**This file is automatically loaded at session start due to `alwaysApply: true` in the frontmatter.**

**When starting a new session:**

1. **Check Staleness:**
   - Look at "Last Updated" date at top of this file
   - If **>7 days old**: Offer to review and update
   - If **>14 days old**: Strongly recommend immediate review

2. **During Development:**
   - Update this doc **immediately** when discovering:
     - New gotchas or quirks
     - Changed workflows
     - New dependencies or services
     - Path or shell issues
     - Build or deployment changes

3. **Update Process:**
   - Edit relevant sections
   - Update "Last Updated" to current date
   - Update "Next Review" to +7 days
   - Add entry to Maintenance Log table
   - Commit with descriptive message

4. **Maintenance Frequency:**
   - Check: Every conversation start (automatic via alwaysApply)
   - Update: When changes discovered (real-time)
   - Review: If >7 days since last update

**Remember:** This documentation makes YOU (the AI) more effective across all future conversations about this project!

---

**Generated using:** [Cursor Environment Docs System](https://github.com/u00dxk2/cursor-kooi-env-docs)

**End of Documentation** • Last Updated: [DATE] • Next Review: [DATE + 7 days]
